#version 450

in vec3 position;
in vec3 normalFlat;
in vec3 normalSmooth;
in vec3 color;
in vec2 uv;

out vec3 o_color;
out vec4 interpolated_color;
out vec3 normalized_uv;
out vec3 light_dir;
out vec3 normal;
out vec2 uv_inter;

vec3 light_color = vec3(1.0, 1.0, 1.0);
vec3 light_position = vec3(1.0, 1.0, 5.0);

mat4 model_view_matrix = mat4(
			      0.57735, -0.33333, 0.57735, 0.00000,
			      0.00000, 0.66667, 0.57735, 0.00000,
			      -0.57735, -0.33333, 0.57735, 0.00000,
			      0.00000, 0.00000, -17, 1.00000);
mat4 projection_matrix = mat4(
			      5.00000, 0.00000, 0.00000, 0.00000,
			      0.00000, 5.00000, 0.00000, 0.00000,
			      0.00000, 0.00000, -1.00020, -1.00000,
			      0.00000, 0.00000, -10.00100, 0.00000);

void main() {
	gl_Position = (projection_matrix * model_view_matrix * vec4(position, 1.0));
	light_dir = (light_position - position);

	// interpolated_color = normalFlat * color; // q1-2

	// q3-1
	// o_color = clamp((dot(normalSmooth, normalize(light_dir))) * interpolated_color * light_color, 0, 1);

	// q4-1
	// uv_inter = uv;
	// o_color = vec3(uv, 0); // q4-1

	// q4-2
	// uv_inter = uv;
	// interpolated_color = vec4(uv, 0, 1);

	// q4-3
	// uv_inter = uv;
	// vec4 light_dir = vec4((light_position - position), 1.0);
	// float coeff = dot(normalSmooth, normalize(light_dir.xyz));
	// coeff = clamp(coeff, 0, 1);
	// interpolated_color = vec4(vec3(1, 1, 1)*coeff, 1.0);

	// q4-4 --- TODO
	// uv_inter = uv;
	// interpolated_color = vec4(uv, 0, 1);

	o_color = color;

}
